{"version":3,"sources":["store/index.ts","api/api.ts","store/actions.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SET_USER_ID","SET_USER","SET_TODOS","initialState","selectedUserId","user","todos","store","createStore","state","action","type","payloud","API_BASE_URL","getUserById","id","fetch","then","response","json","catch","getSelectTodos","complete","a","updateCheckTodo","isChecked","method","headers","body","JSON","stringify","completed","clearUserAction","setTodosAction","getSelectedUserId","getUser","getTodos","TodoList","useState","visibleTodos","setVisibleTodos","inputFilterValue","setInputFilterValue","selectFilterValue","setSelectFilterValue","dispatch","useDispatch","userId","useSelector","allTodos","loadAllTodos","useEffect","filter","todo","title","includes","filterTodos","loadUser","serverUser","hendlerSelectUsersbyId","setUserIdAction","loadCheckTodo","updateTodos","value","setCheckTodo","className","name","placeholder","onChange","event","target","defaultValue","onClick","random","Number","Math","toFixed","sort","b","localeCompare","map","classNames","htmlFor","checked","CurrentUser","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21050fbe.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\n\nexport const SET_USER_ID = 'SET_USER_ID';\nexport const SET_USER = 'SET_USER';\nexport const SET_TODOS = 'SET_TODOS';\n\nexport type RootState = {\n  selectedUserId: number;\n  user: User | null;\n  todos: Todo[];\n};\n\nexport const initialState: RootState = {\n  selectedUserId: 0,\n  user: null,\n  todos: [],\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER_ID:\n      return { ...state, selectedUserId: action.payloud };\n\n    case SET_USER:\n      return { ...state, user: action.payloud };\n\n    case SET_TODOS:\n      return { ...state, todos: action.payloud };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","const API_BASE_URL = 'https://mate.academy/students-api';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUserById(id: number): Promise<User> {\n  return fetch(`${API_BASE_URL}/users/${id}`)\n    .then(response => response.json())\n    .catch(() => {\n      return null;\n    });\n}\n\nexport const getSelectTodos = async (complete: boolean): Promise<Todo[]> => {\n  return fetch(`${API_BASE_URL}/todos?completed=${complete}`)\n    .then(response => response.json());\n};\n\nexport function updateCheckTodo(id: number, isChecked: boolean) {\n  return fetch(`${API_BASE_URL}/todos/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ completed: !isChecked }),\n  });\n}\n","import { SET_TODOS, SET_USER, SET_USER_ID } from '.';\n\nexport const setUserIdAction = (payloud = 0) => ({ type: SET_USER_ID, payloud });\nexport const clearUserIdAction = () => ({ type: SET_USER_ID, payloud: 0 });\nexport const setUserAction = (payloud: User) => ({ type: SET_USER, payloud });\nexport const clearUserAction = () => ({ type: SET_USER, payloud: null });\nexport const setTodosAction = (payloud: Todo[] = []) => ({ type: SET_TODOS, payloud });\n","import { RootState } from '.';\n\nexport const getSelectedUserId = (state: RootState) => state.selectedUserId;\nexport const getUser = (state: RootState) => state.user;\nexport const getTodos = (state: RootState) => state.todos;\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getAllTodos,\n  getSelectTodos,\n  getUserById,\n  updateCheckTodo,\n} from '../../api/api';\nimport {\n  clearUserAction,\n  setTodosAction,\n  setUserAction,\n  setUserIdAction,\n} from '../../store/actions';\nimport {\n  getSelectedUserId,\n  getTodos,\n} from '../../store/selectors';\n\nexport const TodoList: React.FC = () => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [inputFilterValue, setInputFilterValue] = useState('');\n  const [selectFilterValue, setSelectFilterValue] = useState('All');\n\n  const dispatch = useDispatch();\n  const userId = useSelector(getSelectedUserId);\n  const allTodos = useSelector(getTodos);\n\n  const loadAllTodos = async () => {\n    const todos = await getAllTodos();\n\n    dispatch(setTodosAction(todos));\n    setVisibleTodos(allTodos);\n  };\n\n  useEffect(() => {\n    loadAllTodos();\n  },\n  []);\n\n  const filterTodos = () => {\n    const todos = allTodos.filter(todo => (todo.title.includes(inputFilterValue)));\n\n    setVisibleTodos([...todos]);\n  };\n\n  useEffect(() => {\n    filterTodos();\n  },\n  [allTodos, inputFilterValue]);\n\n  const hendlerRandomSortTodos = () => {\n    const random = Number((Math.random() * 20).toFixed(0));\n    const todos = [...visibleTodos].sort((a, b) => {\n      if (a.title[random] && b.title[random]) {\n        return a.title[random].localeCompare(b.title[random]);\n      }\n\n      return -1;\n    });\n\n    setVisibleTodos([...todos]);\n  };\n\n  const loadUser = async (id: number) => {\n    const serverUser = await getUserById(id);\n\n    if (serverUser) {\n      dispatch(setUserAction(serverUser));\n    } else {\n      dispatch(clearUserAction());\n    }\n  };\n\n  const hendlerSelectUsersbyId = (id: number) => {\n    if (userId !== id) {\n      loadUser(id);\n      dispatch(setUserIdAction(id));\n    }\n  };\n\n  const loadCheckTodo = async (isChecked: boolean) => {\n    const todos = await getSelectTodos(isChecked);\n\n    dispatch(setTodosAction(todos));\n    setVisibleTodos(allTodos);\n  };\n\n  const updateTodos = (value: string) => {\n    switch (value) {\n      case 'active':\n        loadCheckTodo(false);\n        break;\n      case 'completed':\n        loadCheckTodo(true);\n        break;\n      default:\n        loadAllTodos();\n    }\n  };\n\n  const setCheckTodo = async (id: number, isChecked: boolean) => {\n    await updateCheckTodo(id, isChecked);\n\n    updateTodos(selectFilterValue);\n  };\n\n  const hendlerFilterInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setInputFilterValue(value);\n  };\n\n  const hendlerFilterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    updateTodos(value);\n\n    setSelectFilterValue(value);\n  };\n\n  return (\n    <div className=\"TodoList\">\n\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          name=\"titleFilter\"\n          className=\"input\"\n          placeholder=\"Search todo\"\n          value={inputFilterValue}\n          onChange={hendlerFilterInput}\n        />\n        <select\n          name=\"selectTodos\"\n          defaultValue={selectFilterValue}\n          className=\"select\"\n          onChange={hendlerFilterSelect}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button is-primary is-light\"\n          onClick={hendlerRandomSortTodos}\n        >\n          Randomize\n        </button>\n\n        <ul className=\"TodoList__list\">\n          {\n            visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`${todo.id}`}\n                    checked={todo.completed}\n                    onChange={() => (setCheckTodo(todo.id, todo.completed))}\n                  />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': (todo.userId === userId) },\n                  )}\n                  type=\"button\"\n                  onClick={() => (hendlerSelectUsersbyId(todo.userId))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getUser } from '../../store/selectors';\nimport { clearUserAction, clearUserIdAction } from '../../store/actions';\n\nexport const CurrentUser : React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUser);\n\n  const handleClick = () => {\n    dispatch(clearUserIdAction());\n    dispatch(clearUserAction());\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        user\n          ? (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {user.id}\n                </span>\n              </h2>\n              <h3 className=\"CurrentUser__name\">\n                {user.name}\n              </h3>\n              <p className=\"CurrentUser__email\">\n                {user.email}\n              </p>\n              <p className=\"CurrentUser__phone\">\n                {user.phone}\n              </p>\n            </>\n          )\n          : (\n            <span>\n              Can not find a User\n            </span>\n          )\n      }\n      <br />\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={handleClick}\n      >\n        Clear\n      </button>\n\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getSelectedUserId } from './store/selectors';\n\nconst App: React.FC = () => {\n  const userId = useSelector(getSelectedUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}